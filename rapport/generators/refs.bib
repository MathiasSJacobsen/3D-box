@inproceedings{HotDrink,
author = {Foust, Gabriel and J\"{a}rvi, Jaakko and Parent, Sean},
title = {Generating Reactive Programs for Graphical User Interfaces from Multi-Way Dataflow Constraint Systems},
year = {2015},
isbn = {9781450336871},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814204.2814207},
doi = {10.1145/2814204.2814207},
abstract = { For a GUI to remain responsive, it must be able to schedule lengthy tasks to be executed asynchronously. In the traditional approach to GUI implementation--writing functions to handle individual user events--asynchronous programming easily leads to defects. Ensuring that all data dependencies are respected is difficult when new events arrive while prior events are still being handled. Reactive programming techniques, gaining popularity in GUI programming, help since they make data dependencies explicit and enforce them automatically as variables' values change. However, data dependencies in GUIs usually change along with its state. Reactive programming must therefore describe a GUI as a collection of many reactive programs, whose interaction the programmer must explicitly coordinate. This paper presents a declarative approach for GUI programming that relieves the programmer from coordinating asynchronous computations. The approach is based on our prior work on "property models", where GUI state is maintained by a dataflow constraint system. A property model responds to user events by atomically constructing new data dependencies and scheduling asynchronous computations to enforce those dependencies. In essence, a property model dynamically generates a reactive program, adding to it as new events occur. The approach gives the following guarantee: the same sequence of events produces the same results, regardless of the timing of those events. },
booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {121–130},
numpages = {10},
keywords = {Dataflow constraint systems, asynchronous programming, Graphical user interfaces},
location = {Pittsburgh, PA, USA},
series = {GPCE 2015}
}


@inproceedings{AlgorithmsForUserInterfaces,
author = {J\"{a}rvi, Jaakko and Marcus, Mat and Parent, Sean and Freeman, John and Smith, Jacob},
title = {Algorithms for User Interfaces},
year = {2009},
isbn = {9781605584942},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1621607.1621630},
doi = {10.1145/1621607.1621630},
abstract = {User interfaces for modern applications must support a rich set of interactive features. It is commonplace to find applications with dependencies between values manipulated by user interface elements, conditionally enabled controls, and script record-ability and playback against different documents. A significant fraction of the application programming effort is devoted to implementing such functionality, and the resulting code is typically not reusable.This paper extends our "property models" approach to programming user interfaces. Property models allow a large part of the functionality of a user interface to be implemented in reusable libraries, reducing application specific code to a set of declarative rules. We describe how, as a by-product of computations that maintain the values of user interface elements, property models obtain accurate information of the currently active dependencies among those elements. This information enables further expanding the class of user interface functionality that we can encode as generic algorithms. In particular, we describe automating the decisions for the enablement of user interface widgets and activation of command widgets. Failing to disable or deactivate widgets correctly is a common source of user-interface defects, which our approach largely removes.We report on the increased reuse, reduced defect rates, and improved user interface design turnarounds in a commercial software development effort as a result of adopting our approach.},
booktitle = {Proceedings of the Eighth International Conference on Generative Programming and Component Engineering},
pages = {147–156},
numpages = {10},
keywords = {software reuse, component software, user interfaces, constraint systems, declarative specifications},
location = {Denver, Colorado, USA},
series = {GPCE '09}
}
@misc{sveltewebsite,
  title        = "Svelte webpage",
  howpublished = "\url{http://svelte.dev/}",
  month        = "May",
  year         = "2022",
  annote       = ""
}

@misc{sveltedocs,
  title        = "Svelte API documentation",
  howpublished = "\url{http://svelte.dev/docs}",
  month        = "May",
  year         = "2022",
  annote       = ""
}

@misc{sveltthree,
  title        = "SveltThree webpage",
  howpublished = "\url{https://svelthree.dev}",
  month        = "May",
  year         = "2022",
  annote       = ""
}
@misc{threejs,
  title        = "Threejs webpage",
  howpublished = "\url{https://threejs.org}",
  month        = "May",
  year         = "2022",
  annote       = ""
}
@misc{postenNorgespakken,
  title        = "Norgespakken",
  howpublished = "\url{https://sending.posten.no/bestill/pakke?_ga=2.21151167.568534240.1651753510-2089638552.1651753510}",
  month        = "May",
  year         = "2022",
  annote       = ""
}
